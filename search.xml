<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>在Vue项目中关闭Eslint</title>
    <url>/2020/07/25/CloseEslintInVue/</url>
    <content><![CDATA[<p>Vue项目开启Eslint经常会报一些格式警报或错误,如果嫌烦可以关闭Eslint</p>
<p>vue-cli4如何关闭ESlint?<br>/vue.config.js中将lintOnSave属性设置为false，如果没有就自己写个进去。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  lintOnSave: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>老版本如何关闭ESlint?找到文件 bulid/webpack.base.config.js 并注释掉对应代码;分三种情况,注释对应代码后重启项目即可<br>情况一</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">  rules:[</span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//   test: /\.(js|vue)$/,</span></span><br><span class="line">    <span class="comment">//   loader: 'eslint-loader',</span></span><br><span class="line">    <span class="comment">//   enforce: 'pre',</span></span><br><span class="line">    <span class="comment">//   include: [resolcr('src'),resolve('test')],</span></span><br><span class="line">    <span class="comment">//   options:&#123;</span></span><br><span class="line">    <span class="comment">//     formatter:require('eslint-friendly-formatter')</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>情况二</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> createLintingRule = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">  <span class="comment">// test: /\.(js|vue)$/,</span></span><br><span class="line">  <span class="comment">// loader: 'eslint-loader',</span></span><br><span class="line">  <span class="comment">// enforce: 'pre',</span></span><br><span class="line">  <span class="comment">// include: [resolve('src'), resolve('test')],</span></span><br><span class="line">  <span class="comment">// options: &#123;</span></span><br><span class="line">  <span class="comment">//   formatter: require('eslint-friendly-formatter'),</span></span><br><span class="line">  <span class="comment">//   emitWarning: !config.dev.showEslintErrorsInOverlay</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>情况三</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">  rules:[</span><br><span class="line">    <span class="comment">// (config.dev.useEslint ? [createLintingRule()]:[]),</span></span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\/vue$/</span>,</span><br><span class="line">      loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">      options: vueLoaderConfig</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Eslint</tag>
      </tags>
  </entry>
  <entry>
    <title>元素水平垂直居中(4种方式)</title>
    <url>/2020/07/25/Center/</url>
    <content><![CDATA[<ol>
<li>已知块级元素的宽和高，使用绝对定位absolute和外边距实现水平垂直居中。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center-box1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>第一种方法: 知道长和宽，使用绝对定位+外边距设定水平垂直居中<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line">    background: #6c94be;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 450px;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.center-box1 &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    margin-top: -100px;</span><br><span class="line">    margin-left: -100px;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    background: #5B83AD;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li>使用css3 display:flex（IE存在兼容性问题）<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center-box2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>第二种方法: 使用css3样式属性display:flex设定水平垂直居中<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line">    background: #6c94be;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 450px;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br><span class="line">.center-box2 &#123;</span><br><span class="line">    margin: auto;</span><br><span class="line">    width: 200px;</span><br><span class="line">    background: #5B83AD;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>使用绝对定位+CSS3 transform（由于transform中translate偏移的百分比都是相对于自身而言的，所以不像方法一种那样必须知道子元素的宽高才行，但是对于IE只有IE9+才支持）<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center-box3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>第三种方法: 使用css3样式属性transform，transform中translate偏移的百分比值是相对于自身大小的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line">    background: #6c94be;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 450px;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.center-box3 &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    transform: translate(-50%,-50%);</span><br><span class="line">    background: #5B83AD;</span><br><span class="line">    width: 200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>已知子元素的宽和高，设置其样式属性position:absolute;top:0;left:0;bottom:0;right:0;margin:auto;<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center-box4"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>第四种方法: 已知宽和高，绝对定位+margin:auto;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line">    background: #6c94be;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 450px;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.center-box4 &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    background: #5B83AD;</span><br><span class="line">    margin: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
        <category>HTML/CSS</category>
      </categories>
      <tags>
        <tag>HTML/CSS</tag>
        <tag>前端面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>Git手册</title>
    <url>/2020/07/01/GitManual/</url>
    <content><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>生成ssh秘钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;  -f &quot;~&#x2F;.ssh&#x2F;id_rsa_github&quot;</span><br></pre></td></tr></table></figure>

<p>查看git配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>

<p>测试连接github</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>测试连接gitee</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure>

<h2 id="已有项目上传到github仓库"><a href="#已有项目上传到github仓库" class="headerlink" title="已有项目上传到github仓库"></a>已有项目上传到github仓库</h2><h3 id="方法一-克隆-amp-拷贝"><a href="#方法一-克隆-amp-拷贝" class="headerlink" title="方法一:克隆&amp;拷贝"></a>方法一:克隆&amp;拷贝</h3><ol>
<li>首先克隆<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> yourRepository</span><br></pre></td></tr></table></figure></li>
<li>然后复制自己项目的所有文件到刚刚克隆下来的仓库中</li>
<li>最后push到远程仓库：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<h3 id="方法二-强行合并两个仓库"><a href="#方法二-强行合并两个仓库" class="headerlink" title="方法二:强行合并两个仓库"></a>方法二:强行合并两个仓库</h3></li>
<li>github新建仓库，将本地项目设置为一个git仓库。如果本地项目已经是一个git仓库了，请跳过这一步。在项目根目录下：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<blockquote>
<p>github新建仓库时不要自动生成REDAME.md文件,如果本地文件正好有该文件会报错<br><img src="/.io//refspec.jpg" alt="同步报错"></p>
</blockquote>
</blockquote>
</blockquote>
</li>
</ol>
<p>最后如果push报错可尝试执行下面代码解决</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>把当前目录下的已有文件全部加到刚刚新建的git仓库中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></li>
<li><p>保存刚刚加入的文件，并书写保存信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">"push current files"</span></span><br></pre></td></tr></table></figure></li>
<li><p>将本地仓库与远程仓库关联起来：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin yourRepository</span><br></pre></td></tr></table></figure>
</li>
<li><p>pull远程仓库的内容，更新本地仓库，使用–allow-unrelated-histories忽略本地仓库和远程仓库的无关性，强行合并（关键）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure></li>
<li><p>把本地仓库的内容push到远程仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>生成ssh秘钥<br>ssh-keygen -t rsa -C “youremail”  -f “~/.ssh/id_rsa_github”</p>
<p>查看git配置<br> git config –list</p>
<p>测试连接github<br>ssh -T <a href="mailto:git@github.com">git@github.com</a></p>
<p>测试连接gitee<br>ssh -T <a href="mailto:git@gitee.com">git@gitee.com</a></p>
<p>　　  </p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建Github博客</title>
    <url>/2020/05/12/HexoBuildBlog/</url>
    <content><![CDATA[<h3 id="前言-amp-Hexo概述"><a href="#前言-amp-Hexo概述" class="headerlink" title="前言 &amp; Hexo概述"></a>前言 &amp; Hexo概述</h3><p>对于一个程序员来说，搭建一个属于自己的博客平台是非常有意义的事情。首先，博客可以记录自己的成长历程，也是对自己一段时间学习和工作的总结和沉淀；其他，通过博客可以营销自己，增强自己在互联网或行业内的影响力，为将来更好的职业生涯打一个坚实的基础。</p>
<p>Hexo是一个快速、简洁且高效的博客框架，它能够将Markdown格式的文档渲染成漂亮的网页，这样就可以在很短的时间内迅速的创建出网站的静态内容，而Markdown格式对程序员来说相信并不陌生。<a id="more"></a> 要想使用Hexo来搭建自己的博客，我实在想不出有什么教程比<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">官方文档</a>更好，强烈建议大家阅读官方文档来了解Hexo，下面我只做一个简要的使用说明。</p>
<blockquote>
<p>说明：<strong>Markdown</strong>是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，同时也对图片、图表、数学公式提供了支持，可以用来书写电子书、软件文档等，同时也可以非常方便的转换为HTML页面或者是PDF文档。</p>
</blockquote>
<h4 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h4><p>要使用Hexo，首先得确保计算机上已经安装了<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a>环境和<a href="https://git-scm.com/" target="_blank" rel="noopener">git</a>环境，前者是一个能够在服务器端运行JavaScript代码的环境，后者是版本控制工具。安装node.js主要是为了使用它的包管理工具npm，所以不需要先系统的学习node.js的知识；而安装git是为了利用版本控制系统克隆代码已经将博客项目托管到三方平台，如果想学习git，最好的资料是官方网站上的<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener"><em>Git Pro</em></a>和<a href="http://www.worldhello.net/gotgit/index.html" target="_blank" rel="noopener">《Git权威指南》</a>。安装完成后，可以通过下面的命令来确认node.js环境以及它的包管理工具是否安装成功。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node --version</span><br><span class="line">npm --version</span><br></pre></td></tr></table></figure>

<p>可以通过下面的命令来检查是否安装了git环境。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>

<p>可以使用npm来安装Hexo，npm是node.js的包管理工具。在第一次使用npm的时候，可以先将npm的下载源更换为国内的淘宝镜像，这样下载的速度会有非常显著的提升。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>接下来就通过npm(cnpm)来安装Hexo，命令如下所示。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>安装成功后，就可以使用Hexo来创建属于自己的博客啦。</p>
<h3 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h3><blockquote>
<p>说明：以下内容基本上来自于Hexo的官方文档，推荐大家阅读官方文档。</p>
</blockquote>
<p>先通过下面的命令来创建一个专门保存博客项目的文件夹，该命令会从github上克隆博客项目和默认的主题。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure>

<p>接下来进入这个文件夹并查看目录结构。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd blog</span><br><span class="line">ls -lR</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">total 232</span><br><span class="line">-rw-r--r--    1 Hao  staff    1768  8  8 01:15 _config.yml</span><br><span class="line">drwxr-xr-x  274 Hao  staff    8768  8  8 01:19 node_modules</span><br><span class="line">-rw-r--r--    1 Hao  staff  109972  8  8 01:19 package-lock.json</span><br><span class="line">-rw-r--r--    1 Hao  staff     443  8  8 01:15 package.json</span><br><span class="line">drwxr-xr-x    5 Hao  staff     160  8  8 01:15 scaffolds</span><br><span class="line">drwxr-xr-x    3 Hao  staff      96  8  8 01:15 source</span><br><span class="line">drwxr-xr-x    3 Hao  staff      96  8  8 01:15 themes</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：Windows环境命令行提示符中可以使用dir命令查看目录结构。<br>需要说明的是：<br><code>_config.yml</code>是博客项目的配置文件；<br><code>package.json</code>是项目的依赖项文件；<br><code>scaffolds</code>保存了Markdown文件的模板，也就是向新添加的Markdown文件中默认填充的内容；<br><code>source</code>目录下有一个名为<code>_post</code>的目录，稍后可以将编写好的Markdown文件放到该目录，这样就可以利用Hexo将Markdown文件处理成博客的静态页面;<br>生成的静态页面将置于<code>public</code>目录下；<br><code>themes</code>文件夹保存了博客使用的主题。</p>
</blockquote>
<p>然后通过下面的命令来安装项目所需的依赖项（<code>package.json</code>文件指明了这些依赖项）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>做完上述的操作以后，已经可以直接通过下面的命令来生成博客。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>

<p>该命令也可以缩写为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>之前在安装依赖项的时候包括了一个名为<code>hexo-server</code>的依赖项，该依赖项可以帮助启动一个基于node.js的服务器来运行的博客项目，使用下面的命令即可启动服务器。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>该命令也可以缩写为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http:&#x2F;&#x2F;localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>

<p>从运行命令的提示信息可以看到，服务器已经运转起并使用了4000端口，可以通过<code>Ctrl+C</code>来终止服务器的运行。如果要修改服务器使用的端口，可以在启动服务器的时候加上<code>-p</code>参数；如果希望服务器启动后，自动打开默认的浏览器访问服务器，可以使用<code>-o</code>参数，如下所示。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s -p 8000 -o</span><br></pre></td></tr></table></figure>

<p>至此，已经可以看到Hexo在没有配置也没有加入自己的Markdown文件下生成的首页，如下图所示。</p>
<p><img src="/.io//hexo-default-index.png" alt></p>
<p>接下来修改博客的配置文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim _config.yml</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">skygit的技术专栏</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">使自己成长,促他人进步</span></span><br><span class="line"><span class="attr">description:</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">Python</span> <span class="string">前端</span> <span class="string">PHP</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">skygit</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh</span></span><br><span class="line"><span class="attr">timezone:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://yoursite.com</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = '')</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">''</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span></span><br></pre></td></tr></table></figure>

<p>下面是YAML文件中相关选项的说明。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>title</code></td>
<td>网站的标题</td>
</tr>
<tr>
<td><code>subtitle</code></td>
<td>网站的副标题</td>
</tr>
<tr>
<td><code>description</code></td>
<td>网站的描述</td>
</tr>
<tr>
<td><code>keywords</code></td>
<td>网站的关键词，可以用逗号分隔多个关键词</td>
</tr>
<tr>
<td><code>author</code></td>
<td>自己的名字</td>
</tr>
<tr>
<td><code>language</code></td>
<td>网站使用的语言</td>
</tr>
<tr>
<td><code>timezone</code></td>
<td>网站使用时区，默认使用电脑上设置的时区</td>
</tr>
<tr>
<td><code>url</code></td>
<td>网址</td>
</tr>
<tr>
<td><code>root</code></td>
<td>网站根目录</td>
</tr>
<tr>
<td><code>source_dir</code></td>
<td>资源文件夹，这个文件夹用来存放内容，默认source目录</td>
</tr>
<tr>
<td><code>public_dir</code></td>
<td>公共文件夹，这个文件夹用于存放生成的站点文件，默认public目录</td>
</tr>
<tr>
<td><code>tag_dir</code></td>
<td>标签文件夹，默认tags目录</td>
</tr>
<tr>
<td><code>archive_dir</code></td>
<td>归档文件夹，默认archives目录</td>
</tr>
<tr>
<td><code>category_dir</code></td>
<td>分类文件夹，默认categories目录</td>
</tr>
<tr>
<td><code>auto_spacing</code></td>
<td>在中文和英文之间加入空格，默认false</td>
</tr>
<tr>
<td><code>titlecase</code></td>
<td>把标题转换为首字母大写，默认false</td>
</tr>
<tr>
<td><code>external_link</code></td>
<td>在新标签中打开链接，默认true</td>
</tr>
<tr>
<td><code>relative_link</code></td>
<td>把链接改为与根目录的相对位址，默认false</td>
</tr>
<tr>
<td><code>default_category</code></td>
<td>默认分类</td>
</tr>
<tr>
<td><code>date_format</code></td>
<td>日期格式，默认YYYY-MM-DD</td>
</tr>
<tr>
<td><code>time_format</code></td>
<td>时间格式，默认HH:mm:ss</td>
</tr>
<tr>
<td><code>per_page</code></td>
<td>每页显示的文章数量 ，默认值10，0表示不使用分页</td>
</tr>
<tr>
<td><code>pagination_dir</code></td>
<td>分页目录，默认为page目录</td>
</tr>
<tr>
<td><code>theme</code></td>
<td>当前主题名称</td>
</tr>
<tr>
<td><code>deploy</code></td>
<td>部署部分的设置</td>
</tr>
</tbody></table>
<p>将编写好的Markdown文件可以拷贝到<code>source/_posts</code>目录，可以在每个Markdown文件的上方添加Front-matter来对文件的布局、标题、分类、标签、发布日期等信息加以说明。所谓Front-matter，就是每个Markdown文件最上方以<code>---</code>分隔的区域，可以在Front-matter中设置以下内容。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td><code>layout</code></td>
<td>布局</td>
<td></td>
</tr>
<tr>
<td><code>title</code></td>
<td>标题</td>
<td></td>
</tr>
<tr>
<td><code>date</code></td>
<td>建立日期</td>
<td>文件建立日期</td>
</tr>
<tr>
<td><code>updated</code></td>
<td>更新日期</td>
<td>文件更新日期</td>
</tr>
<tr>
<td><code>comments</code></td>
<td>开启文章的评论功能</td>
<td>true</td>
</tr>
<tr>
<td><code>tags</code></td>
<td>标签（不适用于分页）</td>
<td></td>
</tr>
<tr>
<td><code>categories</code></td>
<td>分类（不适用于分页）</td>
<td></td>
</tr>
<tr>
<td><code>permalink</code></td>
<td>覆盖文章网址</td>
<td></td>
</tr>
</tbody></table>
<p>新增文章后，可以通过下面的命令先清理之前生成的内容。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<p>接下来就可以用之前讲过的命令重新生成并运行博客项目。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server -p 8000 -o</span><br></pre></td></tr></table></figure>
<h4 id="图片展示"><a href="#图片展示" class="headerlink" title="图片展示"></a>图片展示</h4><h3 id="将博客托管到GitHub"><a href="#将博客托管到GitHub" class="headerlink" title="将博客托管到GitHub"></a>将博客托管到GitHub</h3><p>可以利用GitHub网站提供的<a href="https://pages.github.com/" target="_blank" rel="noopener">Pages服务</a>来托管的博客。在GitHub Pages的首页上就有一个教程指导如何托管自己的网站，当然第一步得在GitHub上注册一个属于自己的账号，登录成功之后才能进行后续的操作。</p>
<ol>
<li><p>根据自己的用户名创建一个仓库，仓库<strong>一定</strong>要取名为“用户名.github.io”。例如：我在GitHub上的用户名是jackfrued，那么我的托管博客项目的仓库一定要命名为jackfrued.github.io。</p>
<p><img src="/.io//create-new-repo.png" alt></p>
</li>
<li><p>修改博客项目的配置文件<code>_config.yml</code>，配置使用GitHub来部署该博客项目。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim _config.yml</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 省略上面的内容</span></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/skygiter/skygiter.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>上面的配置中，type指定了使用git进行项目部署，repo指定了部署项目的git仓库的URL，这里使用的是HTTPS的地址，如果之前配置过密钥对也可以使用SSH的地址，branch指定了将代码同步到仓库中的哪一个分支，通常master分支就是发布项目最终工作成果的分支，也称为项目的主分支。</p>
</li>
<li><p>安装名为<code>hexo-deployer-git</code>的部署器插件，通过该插件就能实现一键部署。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以使用下面的命令来实现一键部署到GitHub。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo deploy -g</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo generate -d</span><br></pre></td></tr></table></figure>
</li>
<li><p>接下来在浏览器中输入<a href="https://jackfrued.github.io" target="_blank" rel="noopener">skygiter.github.io</a>就能够看到自己的博客，现在全世界的人都可以通过这个URL来访问你的博客。大家是否注意到，访问你博客的这个URL就是刚才给仓库起的名字，因为你在GitHub上注册的用户名是独一无二的，所以这个域名也是全世界独一无二的。</p>
</li>
</ol>
<h4 id="将博客绑定到自己的域名"><a href="#将博客绑定到自己的域名" class="headerlink" title="将博客绑定到自己的域名"></a>将博客绑定到自己的域名</h4><p>虽然已经通过GitHub提供的域名访问到了自己的博客，但是如果觉得逼格不够高，可在利用GitHub Pages提供的托管服务同时，也可以将博客绑定到自己专属的域名。</p>
<blockquote>
<p>说明：目前国内对域名的管理日趋严格，在购买域名时需要填写一大堆的个人信息，进行实名认证后才能获得域名，这一点相信大家能够理解。</p>
</blockquote>
<p>比如说，我现在已经购买了一个名为“skygit.com”的域名，如何让它跟“skygiter.github.io”这个域名做一个绑定呢，可以利用<a href="https://dns.console.aliyun.com/" target="_blank" rel="noopener">阿里云控制台</a>来做一个域名解析服务,我绑定的是二级域名blog.skygit.com。在域名解析平台登录成功后，可以添加或选择自己的域名来配置域名解析。点击“添加记录”按钮，创建一个类型为CNAME的域名解析，CNAME类型的解析代表将一个域名解析到另一个域名，如下图所示。</p>
<p><img src="/.io//dns-configuration.png" alt></p>
<p>完成这一步后，还不能马上通过自己的域名访问到博客项目，最后需要在博客项目的<code>source</code>目录下添加一个名为CNAME的文件（请注意这个文件的名字是全大写字母的,无后缀名）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim CNAME</span><br></pre></td></tr></table></figure>

<p>编辑该文件的内容，如下所示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blog.skygit.com</span><br></pre></td></tr></table></figure>

<p>可以清理一下之前生成的内容，然后将项目重新生成并发布到GitHub就基本搭建完成了！<br><em>每次发布Github都会发一个绑到其它域名的警告邮件,我这人有强迫症最终没有绑定自己的域名</em></p>
<h3 id="NexT主题个性化配置"><a href="#NexT主题个性化配置" class="headerlink" title="NexT主题个性化配置"></a><a href="../NexTConfig">NexT主题个性化配置</a></h3>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
        <tag>NexT</tag>
        <tag>搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 多终端管理</title>
    <url>/2020/05/26/HexoMultiTerminal/</url>
    <content><![CDATA[<h3 id="预备环境"><a href="#预备环境" class="headerlink" title="预备环境"></a>预备环境</h3><p>node.js,git<br>安装hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<h3 id="备份源文件"><a href="#备份源文件" class="headerlink" title="备份源文件"></a>备份源文件</h3><p>假设hexo文件夹是已经生成的hexo博客目录<br>如果themes/next(风格名字目录)下面有.git，请删除这个.git文件夹<br>不是所有文件都需要备份,.gitgnore需配置如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">public&#x2F;</span><br><span class="line">.deploy*&#x2F;</span><br><span class="line">Local.md</span><br></pre></td></tr></table></figure>
<p>执行下面代码备份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cd hexo</span></span><br><span class="line"><span class="comment">#git init  //初始化本地仓库</span></span><br><span class="line"><span class="comment">#git add source themes scaffolds _config.yml package.json package-lock.json  //将必要的文件依次添加</span></span><br><span class="line"><span class="comment">#git commit -m "blog hexo"</span></span><br><span class="line"><span class="comment">#git branch hexo  //新建hexo分支</span></span><br><span class="line"><span class="comment">#git checkout hexo  //切换到hexo分支上</span></span><br><span class="line"><span class="comment">#git remote add origin git@github.com:user/user.github.io.git  //将本地与Github项目对接</span></span><br><span class="line"><span class="comment">#git push origin hexo  //push到Github项目的hexo分支上</span></span><br></pre></td></tr></table></figure>
<h3 id="其它终端克隆源文件"><a href="#其它终端克隆源文件" class="headerlink" title="其它终端克隆源文件"></a>其它终端克隆源文件</h3><p><strong><em>环境准备:node.js,git,hexo</em></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b hexo git@github.com:user/user.github.io.git  //将Github中hexo分支<span class="built_in">clone</span>到本地</span><br><span class="line"><span class="built_in">cd</span> user.github.io</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h3 id="多终端写文章操作"><a href="#多终端写文章操作" class="headerlink" title="多终端写文章操作"></a>多终端写文章操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin hexo //本地和远端的融合</span><br><span class="line">hexo new post <span class="string">"new post name"</span>  //写新文章</span><br><span class="line">git add <span class="built_in">source</span></span><br><span class="line">git commit -m <span class="string">"xxx"</span></span><br><span class="line">git push origin hexo  //备份</span><br><span class="line">hexo d -g  //部署</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo表格写法</title>
    <url>/2020/07/25/HexoTable/</url>
    <content><![CDATA[<p>示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| 表头 | 表头 | 表头 |</span><br><span class="line">| --- | --- | --- |</span><br><span class="line">|第一行|第一行|第一行|</span><br><span class="line">|第二行|第二行|第二行|</span><br><span class="line">|第三行|第三行|第三行|</span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明:第二行分割表头和内容。</p>
</blockquote>
<ul>
<li>有一个就行，为了对齐，多加了几个<br>文字默认居左</li>
<li>两边加：表示文字居中</li>
<li>右边加：表示文字居右<br>注：原生的语法两边都要用 | 包起来<a id="more"></a>

</li>
</ul>
<blockquote>
<p>Tips:表格代码前后均需留最少一个空行<br>前面不留空行表格会原文输出,后面不留空行后面的文本会追加到表格</p>
</blockquote>
<p>效果如下：</p>
<table>
<thead>
<tr>
<th align="left">居左表头</th>
<th align="center">居中表头</th>
<th align="right">居右表头</th>
</tr>
</thead>
<tbody><tr>
<td align="left">第一行</td>
<td align="center">第一行</td>
<td align="right">第一行</td>
</tr>
<tr>
<td align="left">第二行</td>
<td align="center">第二行</td>
<td align="right">第二行</td>
</tr>
<tr>
<td align="left">第三行</td>
<td align="center">第三行</td>
<td align="right">第三行</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue项目中使用图标字体的几种方式</title>
    <url>/2020/08/06/IconfontInVue/</url>
    <content><![CDATA[<h3 id="使用阿里iconFont图标库"><a href="#使用阿里iconFont图标库" class="headerlink" title="使用阿里iconFont图标库"></a>使用<a href="https://www.iconfont.cn" target="_blank" rel="noopener">阿里iconFont图标库</a></h3><p>打开 iconFont官网 选择自己喜欢的图标,并且添加购物车和项目,可以生成链接引入<br>vue项目中，找到index.html文件，引入css样式，记住这里要放上你的链接地址<br>示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://at.alicdn.com/t/font_657604_xujhsb9zlug3z0k9.css"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用方式,图标对应命名可在项目中查看,支持编辑</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont icon-alibaba"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>考虑到网络链接稳定性可将字体下载到本地使用<br>用来存放字体图标的本地文件在src/assets文件下创建iconfont文件夹<br>需要放入的有6个文件,如下<br><code>iconfont.css iconfont.eto iconfont.svg iconfont.ttf iconfont.woff iconfont.woff2</code><br>如过项目中没有下载 css-loader 依赖包，就进行下载，否则会报错npm install css-loader -D<br>在main.js中引入iconfont.css文件,如：import ‘xxx/xxx/xxx/iconfont.css’,至此就可使用该图标库了</p>
<h3 id="使用vue-awesome"><a href="#使用vue-awesome" class="headerlink" title="使用vue-awesome"></a>使用vue-awesome</h3><p>安装vue-awesome依赖包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue-awesome</span><br></pre></td></tr></table></figure>
<p>按需引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ‘vue-awesome/icons/flag’</span><br></pre></td></tr></table></figure>
<p>不考虑文件大小全部引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'vue-awesome/icons'</span></span><br><span class="line">improt Icon <span class="keyword">from</span> <span class="string">'vue-awsesome/compoents/Icon'</span></span><br><span class="line">Vue.component(<span class="string">'icon'</span>,<span class="string">'Icon'</span>)</span><br></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">icon</span> <span class="attr">name</span>=<span class="string">"icon-name"</span>&gt;</span><span class="tag">&lt;/<span class="name">icon</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用IconMoon"><a href="#使用IconMoon" class="headerlink" title="使用IconMoon"></a>使用<a href="https://icomoon.io/app/#/select" target="_blank" rel="noopener">IconMoon</a></h3><p>选好需要的图标点击右下角的Generate Font F<br>这时会看到我们已经选择的图标，在这里可以修改名称等，然后点击右下角的下载<br>在vue项目中创建文件夹，打开style.css样式,修改引入字体的路径（不同路径写的方式不一样，需要注意）</p>
<p>在main.js中全局引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ‘@/assets/css/icomoon/style.css’</span><br></pre></td></tr></table></figure>
<p>如果想要使用我们自己画的.svg格式的矢量图图标，点击Import Icons<br>导入我们本地的.svg格式的图标（注意，矢量图是用矢量线画的，png,jpg等使用像素来的，不可以直接用png转成svg格式，否则不成功）<br>引入之后，接来下就和上面的步骤一样了。<br>使用方法同上</p>
<p><a href="https://www.cnblogs.com/hahahakc/p/13025069.html" target="_blank" rel="noopener">参考资料</a><br><a href="https://blog.csdn.net/xyr0709/article/details/92835670" target="_blank" rel="noopener">参考资料</a></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>Iconfont</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Iconfont</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue组件引入及使用的几种方式</title>
    <url>/2020/08/06/ImportComponentInVue/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/e0yu/p/10795176.html" target="_blank" rel="noopener">参考资料</a></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>写一个求和的函数sum,达到指定效果</title>
    <url>/2020/07/26/JsCase00/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Should equal 15</span></span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">// Should equal 0</span></span><br><span class="line">sum(<span class="number">5</span>,<span class="literal">null</span>,<span class="number">-5</span>)</span><br><span class="line"><span class="comment">// Should equal 10</span></span><br><span class="line">sum(<span class="string">'1.0'</span>,<span class="literal">false</span>,<span class="number">1</span>,<span class="literal">true</span>,<span class="number">1</span>,<span class="string">'A'</span>,<span class="number">1</span>,<span class="string">'B'</span>,<span class="number">1</span>,<span class="string">'C'</span>,<span class="number">1</span>,<span class="string">'D'</span>,<span class="number">1</span>,<span class="string">'E'</span>,<span class="number">1</span>,<span class="string">'F'</span>,<span class="number">1</span>,<span class="string">'G'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="comment">// Should equal 0.3,not 0.30000000000000004</span></span><br><span class="line">sum(<span class="number">0.1</span>,<span class="number">0.2</span>);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">arguments</span>[i])===<span class="string">'[object Number]'</span>||<span class="built_in">arguments</span>[i]===<span class="literal">true</span>)&#123;</span><br><span class="line">      <span class="keyword">let</span> [r1,r2]=[<span class="number">0</span>,<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(sum);</span><br><span class="line">        r1=sum.toString().split(<span class="string">'.'</span>)[<span class="number">1</span>].length;</span><br><span class="line">      &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        r1=<span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">        r2=<span class="built_in">arguments</span>[i].toString().split(<span class="string">'.'</span>)[<span class="number">1</span>].length;</span><br><span class="line">      &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        r2=<span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> r=r1&gt;r2?r1:r2;</span><br><span class="line">      <span class="keyword">let</span> m=<span class="built_in">Math</span>.pow(<span class="number">10</span>,r);</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">arguments</span>[i]===<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="built_in">arguments</span>[i]=<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      sum=(sum*m+<span class="built_in">arguments</span>[i]*m)/m;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端面试题</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue项目中如何优雅的使用Stylus</title>
    <url>/2020/07/25/StylusInVue/</url>
    <content><![CDATA[<p>引用stylus官网中的一句话：富于表现力、动态的、健壮的 CSS<br>stylus是一个强大的css预编译语言,stylus支持省略花括号，支持省略分号，代码整洁，支持引入，并且支持语法内函数<br><a href="https://stylus.bootcss.com/" target="_blank" rel="noopener">官方地址</a><br><a href="https://github.com/stylus/stylus/" target="_blank" rel="noopener">GitHub地址</a></p>
<p>使用非常简单<br>安装stylus，使用npm安装,stylus和stylus-loader，一个都不能少</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install stylus stylus-loader --save-dev</span><br></pre></td></tr></table></figure>
<p>使用分为两种，一种是直接在vue中的style模块中使用，这时在style模块中规定好就可以了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style lang&#x3D;&quot;stylus&quot; rel&#x3D;&quot;stylesheet&#x2F;stylus&quot;&gt;&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
<p>还有一种是作为.styl文件引入<br>把css内容放在styl文件中，然后在vue的style模块中通过@import引入</p>
<a id="more"></a>

<blockquote>
<p>tips:<br>卸载 stylus :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall stylus </span><br></pre></td></tr></table></figure>
<p>查看 stylus版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm show style-loader version </span><br></pre></td></tr></table></figure>
</blockquote>
<p>mixin.styl:</p>
<p>//配置背景图片函数</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">bg-image</span><span class="params">(<span class="variable">$url</span>)</span></span></span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="variable">$url</span> + <span class="string">"2.png"</span>)</span><br><span class="line">  @media (-webkit-min-device-pixel-ratio: <span class="number">3</span>),(min-device-pixel-ratio: <span class="number">3</span>)</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="variable">$url</span> + <span class="string">"3.png"</span>)</span><br></pre></td></tr></table></figure>
<p>variable.styl<br>// 颜色定义规范</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">color-theme &#x3D; #ffcd32</span><br></pre></td></tr></table></figure>

<p>//字体定义规范</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">font-size-medium &#x3D; 14px</span><br></pre></td></tr></table></figure>

<p>content.vue</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;style scoped lang=<span class="string">"stylus"</span> rel=<span class="string">"stylesheet/stylus"</span>&gt;</span><br><span class="line">  @import <span class="string">"~common/stylus/mixin"</span></span><br><span class="line">  @import <span class="string">"~common/stylus/variable"</span></span><br><span class="line">    .recommend-list</span><br><span class="line">      .list-title</span><br><span class="line">        <span class="attribute">height</span> <span class="number">300px</span></span><br><span class="line">        <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line">        <span class="attribute">font-size</span> <span class="variable">$font</span>-size-medium</span><br><span class="line">        <span class="attribute">color</span> <span class="variable">$color</span>-theme</span><br><span class="line">      .item</span><br><span class="line">        <span class="attribute">padding</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span></span><br><span class="line">        <span class="attribute">background</span> bg-image(<span class="string">'../images/bg.png'</span>)</span><br><span class="line">        &amp;.active</span><br><span class="line">          <span class="attribute">color</span> <span class="number">#fff</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>content.styl</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">.recommend-list</span><br><span class="line">      .list-title</span><br><span class="line">        <span class="attribute">height</span> <span class="number">65px</span></span><br><span class="line">        <span class="attribute">line-height</span> <span class="number">65px</span></span><br><span class="line">        <span class="attribute">text-align</span> center</span><br><span class="line">        <span class="attribute">font-size</span> <span class="variable">$font</span>-size-medium</span><br><span class="line">        <span class="attribute">color</span> <span class="variable">$color</span>-theme</span><br><span class="line">      .item</span><br><span class="line">        <span class="attribute">display</span> flex</span><br><span class="line">        <span class="attribute">box-sizing</span> border-box</span><br><span class="line">        <span class="attribute">align-items</span> center</span><br><span class="line">        <span class="attribute">padding</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span></span><br><span class="line">        <span class="attribute">background</span> bg-image(<span class="string">'../images/bg.png'</span>)</span><br><span class="line">        &amp;.active</span><br><span class="line">          <span class="attribute">color</span> <span class="number">#fff</span></span><br></pre></td></tr></table></figure>
<p>content.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  @import &quot;content.styl&quot;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.jianshu.com/p/8601ccf91225" target="_blank" rel="noopener">参考文章</a></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>CSS预处理器</category>
        <category>Stylus</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Stylus</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo的NexT主题个性化配置</title>
    <url>/2020/05/12/NexTConfig/</url>
    <content><![CDATA[<p><strong>NexT常用配置(部分配置和主题无关)</strong></p>
<blockquote>
<p><em>说明:本人Hexo版本4.2,NexT版本7.8</em></p>
</blockquote>
<h4 id="博客显示图片"><a href="#博客显示图片" class="headerlink" title="博客显示图片"></a>博客显示图片</h4><p>设置站点配置文件_config.yml中 post_asset_folder:true。<br>Hexo 提供了一种更方便管理 Asset 的设定：post_asset_folder当您设置post_asset_folder为true参数后，在建立文件时，Hexo会自动建立一个与文章同名的文件夹，您可以把与该文章相关的所有资源都放到那个文件夹。</p>
<a id="more"></a>

<p>安装插件：在hexo的目录下执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<p>完成安装后用hexo新建文章的时候会发现_posts目录下面会多出一个和文章名字一样的文件夹。图片就可以放在文件夹下面。</p>
<p>文章中插入图片方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方式一：</span><br><span class="line">&#123;% asset_img example.jpg examplename %&#125;</span><br><span class="line"></span><br><span class="line">方式二：</span><br><span class="line">![description](img)</span><br></pre></td></tr></table></figure>


<p><em>方式一会显示examplename作为title显示;方式二description是img标签alt属性</em><br><strong><em>一开始我按上面的设置无效,图片不显示,后来发现这是hexo的一个bug,需修改插件js</em></strong><br>页面效果如下,图片路径为/.io//开头,如果手动将其改为年份图片能显示</p>
<img src="/.io//05/12/NexTConfig/hexo-img-error.jpg" class title="图片显示异常">
<p>手动修改图片路径后图片可显示</p>
<img src="/.io//05/12/NexTConfig/hexo-img-show.jpg" class title="手动修改图片路径可显示">

<p>解决方法:打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">'.'</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">    	<span class="keyword">var</span> link = data.permalink;</span><br><span class="line">	<span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">	   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line">	<span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line">			<span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line">			<span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line">			<span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">			   !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">			  <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line">			  <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">			  <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">				srcArray.shift();</span><br><span class="line">			  src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line">			  $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line">			  <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+config.root + link + src);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line">			<span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line">		&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>至此解决图片显示问题</p>
<h4 id="开启-添加-代码复制功能"><a href="#开启-添加-代码复制功能" class="headerlink" title="开启(添加)代码复制功能"></a>开启(添加)代码复制功能</h4><p>方法一:直接开启该功能即可,默认是不开启的<br>themes\next_config.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">normal</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span></span><br></pre></td></tr></table></figure>
<p>方法二:<br>使用clipboard.js,cdn地址  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.4/clipboard.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>在themes/next/source/js 下新建clipboard-use.js,写入下面代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*页面载入完成后，创建复制按钮*/</span></span><br><span class="line">!<span class="function"><span class="keyword">function</span> (<span class="params">e, t, a</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* code */</span></span><br><span class="line">  <span class="keyword">var</span> initCopyCode = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> copyHtml = <span class="string">''</span>;</span><br><span class="line">    copyHtml += <span class="string">'&lt;button class="btn-copy" data-clipboard-snippet=""&gt;'</span>;</span><br><span class="line">    copyHtml += <span class="string">'  &lt;i class="fa fa-clipboard"&gt;&lt;/i&gt;&lt;span&gt;copy&lt;/span&gt;'</span>;</span><br><span class="line">    copyHtml += <span class="string">'&lt;/button&gt;'</span>;</span><br><span class="line">    $(<span class="string">".highlight .code pre"</span>).before(copyHtml);</span><br><span class="line">    $(<span class="string">'.btn-copy'</span>).css(&#123;<span class="string">'position'</span>:<span class="string">'absolute'</span>,<span class="string">'right'</span>:<span class="string">'0px'</span>,<span class="string">'opacity'</span>:<span class="string">'.5'</span>,<span class="string">'cursor'</span>:<span class="string">'pointer'</span>&#125;);</span><br><span class="line">    $(<span class="string">'.btn-copy'</span>).hover(</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      $(<span class="keyword">this</span>).css(<span class="string">'opacity'</span>,<span class="string">'1'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      $(<span class="keyword">this</span>).css(<span class="string">'opacity'</span>,<span class="string">'.5'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">new</span> ClipboardJS(<span class="string">'.btn-copy'</span>, &#123;</span><br><span class="line">      target: <span class="function"><span class="keyword">function</span> (<span class="params">trigger</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> trigger.nextElementSibling;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  initCopyCode();</span><br><span class="line">&#125;(<span class="built_in">window</span>, <span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>

<p>在themes/layout/layout.swig中&lt;/body&gt;前引下面代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.4/clipboard.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">" src="</span>/js/clipboard-use.js<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>因使用了jQuery还需在&lt;/head&gt;前引入jQuery,否则会报错$ is undefined</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.bootcdn.net/ajax/libs/jquery/1.9.0/jquery.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>方法二是在其它文章看到的,亲测也是可行的;直接用方法一开启代码复制功能更方便</em></p>
<h4 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h4><p>在自己博客根目录下执行如下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>/_config.yml 底部添加如下代码</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>
<p>themes\next_config.yml搜索local_search，修改enable为true<br><em>添加完毕,需重启才生效</em></p>
<h4 id="首页文章预览显示阅读更多"><a href="#首页文章预览显示阅读更多" class="headerlink" title="首页文章预览显示阅读更多"></a>首页文章预览显示阅读更多</h4><p>方法一： themes/next/_config.yml 找到下面代码</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure>
<p>将enable的 false改成true，length可以设定文章预览的文本长度<br><em>这个方法我试了不生效,我的原文件里面没有上面代码,手动加上去也不生效,应该是版本原因</em></p>
<p>方法二: &lt;!–more–&gt;<br>在文章合适位置插入该代码可实现首页文章预览显示阅读更多,亲测有效<br><em>强烈推荐此方法,更灵活,反正方法一我这里不生效</em></p>
<h4 id="文章添加字数统计"><a href="#文章添加字数统计" class="headerlink" title="文章添加字数统计"></a>文章添加字数统计</h4><p>字数统计效果图<br><img src="http://qah1aj2e1.bkt.clouddn.com/hexo-wordcount.jpg" alt><br>在根目录下安装 hexo-wordcount,运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure>
<p>themes\next_config.yml中配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class="line"><span class="attr">post_wordcount:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><em>我按上面操作不报错也没有效果,我的配置文件中原来没有上面代码，手动加上也没用</em><br>还需添加代码到themes\next\layout_macro\post.swig<br>放在<code>post.categories and post.categories.length and theme.post_meta.categories</code>这段后面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;%- if theme.post_wordcount %&#125;</span><br><span class="line">            &lt;span title&#x3D;&quot;&#123;&#123; __(&#39;post.wordcount&#39;) &#125;&#125;&quot;&gt;</span><br><span class="line">            &lt;span class&#x3D;&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">              &lt;i class&#x3D;&quot;fa fa-newspaper&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">            &lt;&#x2F;span&gt;</span><br><span class="line">              字数统计: &lt;time&gt;&#123;&#123; wordcount(post.content) &#125;&#125; &lt;&#x2F;time&gt;字</span><br><span class="line">            &lt;&#x2F;span&gt;</span><br><span class="line">            &lt;span title&#x3D;&quot;&#123;&#123; __(&#39;post.min2read&#39;) &#125;&#125;&quot;&gt;</span><br><span class="line">            &lt;span class&#x3D;&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">              &lt;i class&#x3D;&quot;fa fa-clock&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">            &lt;&#x2F;span&gt;</span><br><span class="line">              阅读时长≈</span><br><span class="line">              &lt;time&gt;&#123;&#123; min2read(post.content) &#125;&#125;  &lt;&#x2F;time&gt;分钟</span><br><span class="line">            &lt;&#x2F;span&gt;</span><br><span class="line">          &#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>
<p><em>图标本来是想用fa-file-word-o,就是那个word的图标,但是我这里怎么都不显示</em></p>
<h4 id="数学方程式渲染支持"><a href="#数学方程式渲染支持" class="headerlink" title="数学方程式渲染支持"></a>数学方程式渲染支持</h4><p>公式示例: $$C_M^N =\frac{M!}{N!(M-N)!}, \text{(M=7, N=3)} $$<br>themes\next_config.yml  搜索math找到下面代码进行设置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="comment"># Default (true) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in Front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>    <span class="comment"># 默认为false</span></span><br><span class="line">    <span class="comment"># See: https://mhchem.github.io/MathJax-mhchem/</span></span><br><span class="line">    <span class="attr">mhchem:</span> <span class="literal">true</span>    <span class="comment"># 默认为false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-markdown-it-plus (or hexo-renderer-markdown-it with markdown-it-katex plugin) required for full Katex support.</span></span><br><span class="line">  <span class="attr">katex:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>    <span class="comment"># 默认为false</span></span><br><span class="line">    <span class="comment"># See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span></span><br><span class="line">    <span class="attr">copy_tex:</span> <span class="literal">true</span>  <span class="comment"># 默认为false</span></span><br></pre></td></tr></table></figure>
<p>继续找math 设置下面代码</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MathJax</span></span><br><span class="line">  <span class="attr">mathjax:</span> <span class="string">//cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js</span></span><br><span class="line">  <span class="comment"># mathjax:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># KaTeX</span></span><br><span class="line">  <span class="comment"># katex: //cdn.jsdelivr.net/npm/katex@0/dist/katex.min.css</span></span><br><span class="line">  <span class="attr">katex:</span> <span class="string">//cdnjs.cloudflare.com/ajax/libs/KaTeX/0.11.1/katex.min.css</span></span><br><span class="line">  <span class="attr">copy_tex_js:</span> <span class="string">//cdn.jsdelivr.net/npm/katex@0/dist/contrib/copy-tex.min.js</span></span><br><span class="line">  <span class="attr">copy_tex_css:</span> <span class="string">//cdn.jsdelivr.net/npm/katex@0/dist/contrib/copy-tex.min.css</span></span><br><span class="line">  <span class="comment"># katex:</span></span><br><span class="line">  <span class="comment"># copy_tex_js:</span></span><br><span class="line">  <span class="comment"># copy_tex_css:</span></span><br></pre></td></tr></table></figure>
<p>最后有公式的页面,Front-matter里打开mathjax开关，如下<br><img src="http://qah1aj2e1.bkt.clouddn.com/mathjax.jpg" alt></p>
<h4 id="添加RSS功能"><a href="#添加RSS功能" class="headerlink" title="添加RSS功能"></a>添加RSS功能</h4><p>实测只有样式没有功能<br>项目根目录执行下面命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>
<p>/_congig.yml  配置如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">hub:</span></span><br><span class="line">    <span class="attr">content:</span></span><br><span class="line">    <span class="attr">content_limit:</span></span><br><span class="line">    <span class="attr">content_limit_delim:</span> <span class="string">' '</span></span><br><span class="line">    <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">icon.png</span></span><br></pre></td></tr></table></figure>
<p>参数含义:<br>type: RSS的类型(atom/rss2)<br>path: 文件路径,默认是atom.xml/rss2.xml<br>limit: 展示文章的数量,使用0或则false代表展示全部<br>hub:<br>content: 在RSS文件中是否包含内容 ,有3个值 true/false默认不填为false<br>content_limit: 指定内容的长度作为摘要,仅仅在上面content设置为false和没有自定义的描述出现<br>content_limit_delim: 上面截取描述的分隔符,截取内容是以指定的这个分隔符作为截取结束的标志.在达到规定的内容长度之前最后出现的这个分隔符之前的内容,防止从中间截断.</p>
<h4 id="添加动态背景"><a href="#添加动态背景" class="headerlink" title="添加动态背景"></a>添加动态背景</h4><p>添加修改代码themes\next\layout_layout.swig在&lt;/body&gt;之前加上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.canvas_nest %&#125;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;canvas-nest.js&#x2F;1.0.0&#x2F;canvas-nest.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>打开themes/next/_config.yml，添加以下代码<br><code># Canvas-nest
canvas_nest: true</code><br>添加完毕,效果图如下<br><img src="http://qah1aj2e1.bkt.clouddn.com/hexoDynamicBG.jpg" alt="动态背景"></p>
<h4 id="修改文章内链接样式"><a href="#修改文章内链接样式" class="headerlink" title="修改文章内链接样式"></a>修改文章内链接样式</h4><p>themes\next\source\css_common\components\post\post.styl尾部添加如下代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 文章内链接文本样式</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#fc6423</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: <span class="selector-tag">none</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>其中选择 .post-body 是为了不影响标题，选择 p 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。</em></p>
<h4 id="修改文章底部带-号标签"><a href="#修改文章底部带-号标签" class="headerlink" title="修改文章底部带#号标签"></a>修改文章底部带#号标签</h4><p>themes/next/_config.yml 搜索tag_icon,将其值改为true即可<br>效果图<br><img src="http://qah1aj2e1.bkt.clouddn.com/hexo-tagicon.jpg" alt="底部标签"></p>
<h4 id="在文章尾部统一添加”本文结束”标记"><a href="#在文章尾部统一添加”本文结束”标记" class="headerlink" title="在文章尾部统一添加”本文结束”标记"></a>在文章尾部统一添加”本文结束”标记</h4><p>在路径 \themes\next\layout_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style&#x3D;&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class&#x3D;&quot;fa fa-paw&quot;&gt;&lt;&#x2F;i&gt;感谢您的阅读-------------&lt;&#x2F;div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>打开\themes\next\layout_macro\post.swig文件,在body标记后找到if not is_index 添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; partial(&#39;passage-end-tag.swig&#39;) &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>如图<br><img src="http://qah1aj2e1.bkt.clouddn.com/end-tag.jpg" alt><br>themes\next_config.yml尾部添加代码</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文章末尾添加“本文结束”标记</span></span><br><span class="line"><span class="attr">passage_end_tag:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="设置作者头像"><a href="#设置作者头像" class="headerlink" title="设置作者头像"></a>设置作者头像</h4><p>themes/next/_config.yml搜索avatar,找到下面代码进行配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.gif</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.7</span></span><br></pre></td></tr></table></figure>
<p>url全路径为 <code>themes/next/source/images/avatar.gif</code></p>
<h4 id="侧边栏社交图标设置"><a href="#侧边栏社交图标设置" class="headerlink" title="侧边栏社交图标设置"></a>侧边栏社交图标设置</h4><p>themes\next_config.yml  搜索social找到下面代码进行配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/skygiter</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">Segmentfault:</span> <span class="string">https://segmentfault.com/u/skygit</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="attr">Weibo:</span> <span class="string">https://weibo.com/skygit</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-weibo</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:skygit@126.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || fab fa-google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || fab fa-instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || fab fa-skype</span></span><br><span class="line"></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icons_only:</span> <span class="literal">false</span> </span><br><span class="line">  <span class="attr">transition:</span> <span class="literal">true</span>   </span><br><span class="line">  <span class="attr">exturl:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="开启访问统计-busuanzi"><a href="#开启访问统计-busuanzi" class="headerlink" title="开启访问统计(busuanzi)"></a>开启访问统计(busuanzi)</h4><p>themes\next_config.yml  找到下面代码,enable值改为true即可,默认为false</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br></pre></td></tr></table></figure>
<h4 id="开启百度统计"><a href="#开启百度统计" class="headerlink" title="开启百度统计"></a>开启百度统计</h4><p>先在<a href="https://tongji.baidu.com" target="_blank" rel="noopener">百度统计官网</a>，注册一个账号，并且绑定好域名<br>复制hm.js?后面的字符串如图：<br><img src="http://qah1aj2e1.bkt.clouddn.com/bdtj.jpg" alt><br>themes\next_config.yml中搜索 baidu_analytics 填上id</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Baidu Analytics</span></span><br><span class="line"><span class="attr">baidu_analytics:</span> <span class="string">your-id</span></span><br></pre></td></tr></table></figure>
<p>然后部署三连<br><code>hexo clean</code><br><code>hexo g</code><br><code>hexo d</code></p>
<p>如果部署成功,可在百度统计后天查看部署状态,点代码转态栏的刷新按钮<br><img src="http://qah1aj2e1.bkt.clouddn.com/bdtj02.jpg" alt></p>
<h4 id="添加README-md文件"><a href="#添加README-md文件" class="headerlink" title="添加README.md文件"></a>添加README.md文件</h4><p>每个项目下一般都有一个 README.md 文件，但是使用 hexo 部署到仓库后，项目下是没有 README.md 文件的。</p>
<p>在 Hexo 目录下的 source 根目录下添加一个 README.md 文件，修改站点配置文件 _config.yml ，将 skip_render 参数的值设置为</p>
<figure class="highlight plain"><figcaption><span>README.md```</span></figcaption><table><tr><td class="code"><pre><span class="line">保存退出即可。再次使用 hexo d 命令部署博客的时候就不会在渲染 README.md 这个文件了。</span><br><span class="line">#### 设置网站图标favicon</span><br><span class="line">\themes\next\_config.yml 搜索favicon 找到下列代码进行设置,需替换图片</span><br><span class="line">&#96;&#96;&#96;yaml</span><br><span class="line">favicon:</span><br><span class="line">  small: &#x2F;images&#x2F;favicon16.png</span><br><span class="line">  medium: &#x2F;images&#x2F;favicon32.png</span><br><span class="line">  apple_touch_icon: &#x2F;images&#x2F;favicon-apple.png</span><br><span class="line">  safari_pinned_tab: &#x2F;images&#x2F;skylogo.svg</span><br><span class="line">  #android_manifest: &#x2F;images&#x2F;manifest.json</span><br><span class="line">  #ms_browserconfig: &#x2F;images&#x2F;browserconfig.xml</span><br></pre></td></tr></table></figure>
<p><em>images全路径 \themes\next\source\images</em></p>
<h4 id="文章底部增加版权信息"><a href="#文章底部增加版权信息" class="headerlink" title="文章底部增加版权信息"></a>文章底部增加版权信息</h4><h4 id="添加评论-来比力-功能"><a href="#添加评论-来比力-功能" class="headerlink" title="添加评论(来比力)功能"></a>添加评论(来比力)功能</h4><p>先看效果图<br><img src="http://qah1aj2e1.bkt.clouddn.com/livere.jpg" alt><br><a href="https://livere.com" target="_blank" rel="noopener">来比力注册</a>,按流程注册,点击安装选city版本,获取data-uid<br>themes/next/_config.yml配置文件，定位到livere_uid字段，粘贴上刚刚获取的data-uid。<br>至此，大功告成。</p>
<h4 id="隐藏网页底部-powered-By-Hexo-强力驱动"><a href="#隐藏网页底部-powered-By-Hexo-强力驱动" class="headerlink" title="隐藏网页底部 powered By Hexo / 强力驱动"></a>隐藏网页底部 powered By Hexo / 强力驱动</h4><p>themes\next_config.yml 搜索powered 修改值为false</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Powered by Hexo &amp; NexT</span></span><br><span class="line">  <span class="attr">powered:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="设置网页底部的桃心"><a href="#设置网页底部的桃心" class="headerlink" title="设置网页底部的桃心"></a>设置网页底部的桃心</h4><p>还是打开themes/next/_config.yml_找到下面代码段进行设置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the date when the site was setup. If not defined, current year will be used.</span></span><br><span class="line">  <span class="comment">#since: 2015</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">    <span class="comment"># Icon name in Font Awesome. See: https://fontawesome.com/icons</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">    <span class="comment"># If you want to animate the icon, set it to true.</span></span><br><span class="line">    <span class="attr">animated:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Change the color of icon, using Hex Code.</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">"#01A0FE"</span></span><br></pre></td></tr></table></figure>
<p><em>name 对应图标可选自己喜欢的图标</em></p>
<h4 id="添加社交分享"><a href="#添加社交分享" class="headerlink" title="添加社交分享"></a>添加社交分享</h4><h4 id="博文置顶"><a href="#博文置顶" class="headerlink" title="博文置顶"></a>博文置顶</h4><h4 id="修改字体大小"><a href="#修改字体大小" class="headerlink" title="修改字体大小"></a>修改字体大小</h4><h4 id="开启打赏功能"><a href="#开启打赏功能" class="headerlink" title="开启打赏功能"></a>开启打赏功能</h4><p>默认是不开启的,themes\next_config.yml 找到如下代码进行设置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line">  <span class="comment"># If true, reward will be displayed in every article by default.</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#comment: Donate comment here.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="comment">#wechatpay: /images/wechatpay.png</span></span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">/images/alipay.png</span></span><br><span class="line">  <span class="comment">#paypal: /images/paypal.png</span></span><br><span class="line">  <span class="comment">#bitcoin: /images/bitcoin.png</span></span><br></pre></td></tr></table></figure>
<p><em>images对应themes/next/source/images</em><br>默认样式hover效果有点难看,可修改样式<br>修改文件next/source/css/_common/components/post/post-reward.styl,修改hover时 color值为#fff</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#fc6423</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<h4 id="侧边栏推荐阅读"><a href="#侧边栏推荐阅读" class="headerlink" title="侧边栏推荐阅读"></a>侧边栏推荐阅读</h4><p>themes\next_config.yml 找到如下代码进行设置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Blog rolls</span></span><br><span class="line"><span class="attr">links_settings:</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">推荐阅读</span></span><br><span class="line">  <span class="comment"># Available values: block | inline</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="string">block</span></span><br><span class="line"></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="string">推荐网站一:</span> <span class="string">http://yoursite.com</span></span><br></pre></td></tr></table></figure>

<h4 id="博文压缩"><a href="#博文压缩" class="headerlink" title="博文压缩"></a>博文压缩</h4><p>在站点的根目录下执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install gulp -g</span><br><span class="line">$ npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span><br></pre></td></tr></table></figure>
<p>站点的根目录下创建文件gulpfile.js ，并填入以下内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"><span class="comment">// 压缩 public 目录 css</span></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩 public 目录 html</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">         removeComments: <span class="literal">true</span>,</span><br><span class="line">         minifyJS: <span class="literal">true</span>,</span><br><span class="line">         minifyCSS: <span class="literal">true</span>,</span><br><span class="line">         minifyURLs: <span class="literal">true</span>,</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩 public/js 目录 js</span></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.js'</span>)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [</span><br><span class="line">    <span class="string">'minify-html'</span>,<span class="string">'minify-css'</span>,<span class="string">'minify-js'</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<p>生成博文是执行 hexo g &amp;&amp; gulp 就会根据 gulpfile.js 中的配置，对 public 目录中的静态资源文件进行压缩。</p>
<h4 id="在头部添加-fork-me-on-github"><a href="#在头部添加-fork-me-on-github" class="headerlink" title="在头部添加 fork me on github"></a>在头部添加 fork me on github</h4><p>方法一: 直接开启配置即可</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/skygiter</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Follow</span> <span class="string">me</span> <span class="string">on</span> <span class="string">GitHub</span></span><br></pre></td></tr></table></figure>

<p>方法二:<br><a href="https://github.blog/2008-12-19-github-ribbons/" target="_blank" rel="noopener">选择代码点这里</a><br>代码示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/you"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">"149"</span> <span class="attr">height</span>=<span class="string">"149"</span> <span class="attr">src</span>=<span class="string">"https://github.blog/wp-content/uploads/2008/12/forkme_right_green_007200.png?resize=149%2C149"</span> <span class="attr">class</span>=<span class="string">"attachment-full size-full"</span> <span class="attr">alt</span>=<span class="string">"Fork me on GitHub"</span> <span class="attr">data-recalc-dims</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>复制代码到themes\next\layout_layout.swig文件&lt;div class=”headband”&gt;&lt;/div&gt;里<br><em>说明:需修改链接为自己的地址,如果想打开新链接可在a标签上添加  target=”_blank”;我用这个代码样式错位了,我使用的代码如下</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/skygiter"</span> <span class="attr">class</span>=<span class="string">"github-corner"</span> <span class="attr">aria-label</span>=<span class="string">"View source on Github"</span> <span class="attr">targit</span>=<span class="string">"_blank"</span>&gt;</span><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"80"</span> <span class="attr">height</span>=<span class="string">"80"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 250 250"</span> <span class="attr">style</span>=<span class="string">"fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2"</span> <span class="attr">fill</span>=<span class="string">"currentColor"</span> <span class="attr">style</span>=<span class="string">"transform-origin: 130px 106px;"</span> <span class="attr">class</span>=<span class="string">"octo-arm"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z"</span> <span class="attr">fill</span>=<span class="string">"currentColor"</span> <span class="attr">class</span>=<span class="string">"octo-body"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>方法二是看的其它教程里的，后来发现配置里面已经有了就果断用方法一了,样式有一点区别,方法二中顶部有一条黑线</em></p>
<h4 id="底部开启-fork-me"><a href="#底部开启-fork-me" class="headerlink" title="底部开启 fork me"></a>底部开启 fork me</h4><p>themes\next_config.yml配置下面代码</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">follow_me:</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/username || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#Telegram: https://t.me/channel_name || fab fa-telegram</span></span><br><span class="line">  <span class="comment">#WeChat: /images/wechat_channel.jpg || fab fa-weixin</span></span><br><span class="line">  <span class="attr">RSS:</span> <span class="string">/atom.xml</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-rss</span></span><br><span class="line">  <span class="attr">Github:</span> <span class="string">https://github.com/skygiter</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br></pre></td></tr></table></figure>
<h3 id="回到顶部设置"><a href="#回到顶部设置" class="headerlink" title="回到顶部设置"></a>回到顶部设置</h3><p>themes\next_config.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><ol>
<li><a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">主要参考文章</a></li>
<li><a href="https://blog.csdn.net/xjm850552586/article/details/84101345" target="_blank" rel="noopener">图片显示</a></li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>NexT</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
        <tag>NexT</tag>
        <tag>搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title>uni-app快速入门</title>
    <url>/2020/09/15/UniApp/</url>
    <content><![CDATA[<h2 id="什么是-uni-app"><a href="#什么是-uni-app" class="headerlink" title="什么是 uni-app?"></a>什么是 uni-app?</h2><blockquote>
<blockquote>
<blockquote>
<p>uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉/淘宝）、快应用等多个平台。</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>DCloud公司拥有500万开发者用户，几十万应用案例、10亿手机端月活用户，数千款uni-app插件、70+微信/qq群。</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>uni-app在手，做啥都不愁。即使不跨端，uni-app也是更好的小程序开发框架、更好的App跨平台框架、更方便的H5开发框架。</p>
</blockquote>
</blockquote>
</blockquote>
<a id="more"></a>

<h2 id="标签-组件变化"><a href="#标签-组件变化" class="headerlink" title="标签/组件变化"></a>标签/组件变化</h2><p>uni-app参考小程序规范，提供了一批内置组件。</p>
<h3 id="html标签和uni-app内置组件的映射表"><a href="#html标签和uni-app内置组件的映射表" class="headerlink" title="html标签和uni-app内置组件的映射表"></a>html标签和uni-app内置组件的映射表</h3><ul>
<li>div 改成 view</li>
<li>span、font 改成 text</li>
<li>a 改成 navigator</li>
<li>img 改成 image</li>
<li>input 还在，但type属性改成了confirmtype</li>
<li>form、button、checkbox、radio、label、textarea、canvas、video 这些还在。</li>
<li>select 改成 picker</li>
<li>iframe 改成 web-view</li>
<li>ul、li没有了，都用view替代</li>
<li>audio 不再推荐使用，改成api方式，背景音频api文档</li>
<li>其实老的HTML标签也可以在uni-app里使用，uni-app编译器会在编译时把老标签转为新标签，比如把div编译成view。但不推荐这种用法，调试H5端时+ 容易混乱。</li>
</ul>
<h3 id="手机端新增常用新组件"><a href="#手机端新增常用新组件" class="headerlink" title="手机端新增常用新组件"></a>手机端新增常用新组件</h3><ul>
<li>scroll-view 可区域滚动视图容器</li>
<li>swiper 可滑动区域视图容器</li>
<li>icon 图标</li>
<li>rich-text 富文本（不可执行js，但可渲染各种文字格式和图片）</li>
<li>progress 进度条</li>
<li>slider 滑块指示器</li>
<li>switch 开关选择器</li>
<li>camera 相机</li>
<li>live-player 直播</li>
<li>map 地图</li>
<li>cover-view 可覆盖原生组件的视图容器 cover-view需要多强调几句，uni-app的非h5端的video、map、canvas、textarea是原生组件，层级高于其他组件。如需覆盖原生组件，则需要使用cover-view组件。</li>
</ul>
<h2 id="js的变化"><a href="#js的变化" class="headerlink" title="js的变化"></a>js的变化</h2><h3 id="运行环境从浏览器变成v8引擎"><a href="#运行环境从浏览器变成v8引擎" class="headerlink" title="运行环境从浏览器变成v8引擎"></a>运行环境从浏览器变成v8引擎</h3><p>标准js语法和api都支持，比如if、for、settimeout、indexOf等。</p>
<p>但浏览器专用的window、document、navigator、location对象，包括cookie等存储，只有在浏览器中才有，app和小程序都不支持。</p>
<p>可能有些人以为js等于浏览器里的js。其实js是ECMAScript组织管理的，浏览器中的js是w3c组织基于js规范补充了window、document、navigator、location等专用对象。</p>
<p>在uni-app的各个端中，除了h5端，其他端的js都运行在一个独立的v8引擎下，不是在浏览器中，所以浏览器的对象无法使用。如果你做过小程序开发，对此应当很了解。</p>
<p>这意味着依赖document的很多HTML的库，比如jqurey无法使用。</p>
<p>当然app和小程序支持web-view组件，里面可以加载标准HTML，这种页面仍然支持浏览器专用对象window、document、navigator、location。</p>
<h3 id="dom操作，改成vue的MVVM模式"><a href="#dom操作，改成vue的MVVM模式" class="headerlink" title="dom操作，改成vue的MVVM模式"></a>dom操作，改成vue的MVVM模式</h3><p>现在前端趋势是去dom化，改用mvvm模式，更简洁的写法，大幅减少代码行数，同时差量渲染性能更好。</p>
<p>uni-app使用vue的数据绑定方式解决js和dom界面交互的问题。</p>
<p>如果你想改变某个dom元素的显示内容，比如一个view的显示文字：</p>
<p>以前是给view设id，然后js里通过选择器获取dom元素，进一步通过js进行赋值操作，修改dom元素的属性或值。</p>
<h3 id="js-api的变化"><a href="#js-api的变化" class="headerlink" title="js api的变化"></a>js api的变化</h3><p>因为uni-app的api是参考小程序的，所以和浏览器的js api有很多不同，如</p>
<ul>
<li>alert,confirm 改成 uni.showmodel</li>
<li>ajax 改成 uni.request</li>
<li>cookie、session 没有了，local.storage 改成 uni.storage</li>
<li>uni-app的js api还有很多，但基本就是小程序的api，把wx.xxx改为uni.xxx即可。详见</li>
</ul>
<p>uni-app在不同的端，支持条件编译，无限制的使用各端独有的api，<a href="https://uniapp.dcloud.io/platform" target="_blank" rel="noopener">详见条件编译</a></p>
<blockquote>
<blockquote>
<blockquote>
<p>小程序的数据绑定参考了vue，但自己修改了一些。在uni-app中只支持标准的vue，不支持小程序的数据绑定语法<br>小程序里的setData在uni-app里并不存在，因为vue是自动双向数据绑定的。直接通过赋值方式修改数据，如果数据绑定到界面上，界面会自动更新渲染</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="CSS的变化"><a href="#CSS的变化" class="headerlink" title="CSS的变化"></a>CSS的变化</h2><p>标准的css基本都是支持的。</p>
<p>选择器有2个变化：*选择器不支持；元素选择器里没有body，改为了page。微信小程序即是如此。</p>
<p>单位方面，px无法动态适应不同宽度的屏幕，rem无法用于nvue/weex。如果想使用根据屏幕宽度自适应的单位，推荐使用rpx，全端支持。 尺寸单位文档</p>
<p>uni-app推荐使用flex布局，并默认就是flex布局，这个布局思路和传统流式布局有点区别。但flex的有趣在于，不管是什么技术都支持这种排版，web、小程序/快应用、weex/rn、原生的iOS、Android开发，全都支持flex。它是通吃所有端的新一代布局方案。详见<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">阮一峰flex布局文档</a></p>
<p>uni-app的vue文件里支持所有web排版方式，不管是流式还是flex。但nvue里，只支持flex，因为它在app端是使用原生排版引擎渲染的。</p>
<p>注意css里背景图和字体文件，尽量不要大于40k，因为会影响性能。在小程序端，如果要大于40k，需放到服务器侧远程引用或base64后引入，不能放到本地作为独立文件引用。</p>
<h2 id="工程结构和页面管理"><a href="#工程结构和页面管理" class="headerlink" title="工程结构和页面管理"></a>工程结构和页面管理</h2><p>uni-app的工程结构有单独的要求，<a href="https://uniapp.dcloud.io/frame?id=目录结构" target="_blank" rel="noopener">详见</a></p>
<p>每个可显示的页面，都必须在 pages.json 中注册。如果你开发过小程序，那么pages.json类似app.json。如果你熟悉vue，这里没有vue的路由，都是在pages.json里管理。</p>
<p>原来工程的首页一般是index.html或default.html，是在web server里配的。而uni-app的首页，是在pages.json里配的，page节点下第一个页面就是首页。一般在/pages/xx的目录下。</p>
<p>app和小程序中，为了提升体验，页面提供了原生的导航栏和底部tabbar，注意这些配置是在pages.json中做，而不是在vue页面里创建，但点击事件的监听在显示的vue页面中做。</p>
<p>在vue中，以前的js事件监听概念改为了生命周期概念。详见uni-app生命周期</p>
<p>如果你熟悉小程序开发的话，对比变化如下：</p>
<p>原来app.json被一拆为二。页面管理，被挪入了uni-app的pages.json；非页面管理，挪入了manifest.json<br>原来的app.js和app.wxss被合并到了app.vue中</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://uniapp.dcloud.io/" target="_blank" rel="noopener">uni-app官方文档</a></li>
<li><a href="https://ask.dcloud.net.cn/article/35657" target="_blank" rel="noopener">白话uni-app</a></li>
</ul>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>uni-app</tag>
        <tag>vue</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue和微信小程序的区别</title>
    <url>/2020/09/15/VueVSWechatMiniPro/</url>
    <content><![CDATA[<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><h2 id="显示与隐藏元素"><a href="#显示与隐藏元素" class="headerlink" title="显示与隐藏元素"></a>显示与隐藏元素</h2><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><h2 id="数据双向绑定"><a href="#数据双向绑定" class="headerlink" title="数据双向绑定"></a>数据双向绑定</h2><h2 id="事件传参"><a href="#事件传参" class="headerlink" title="事件传参"></a>事件传参</h2><h2 id="父子组件数据传递"><a href="#父子组件数据传递" class="headerlink" title="父子组件数据传递"></a>父子组件数据传递</h2><h3 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h3><h3 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://segmentfault.com/a/1190000015684864" target="_blank" rel="noopener">参考</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo常用指令</title>
    <url>/2020/08/12/HexoCommands/</url>
    <content><![CDATA[<h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init [folder]</span><br></pre></td></tr></table></figure>
<p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p>
<h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>
<p>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p>
<table>
<thead>
<tr>
<th align="left">可选参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-p, –path</td>
<td align="left">自定义新文章的路径</td>
</tr>
<tr>
<td align="left">-r, –replace</td>
<td align="left">如果存在同名文章，将其替换</td>
</tr>
<tr>
<td align="left">-s, –slug</td>
<td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td>
</tr>
</tbody></table>
<a id="more"></a>

<h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate   <span class="comment"># 简写  hexo g</span></span><br></pre></td></tr></table></figure>
<p>生成静态文件。</p>
<table>
<thead>
<tr>
<th align="left">可选参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-d,–deploy</td>
<td align="left">文件生成后立即部署网站</td>
</tr>
<tr>
<td align="left">-w,–watch</td>
<td align="left">监视文件变动</td>
</tr>
<tr>
<td align="left">-b,–bail</td>
<td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td>
</tr>
<tr>
<td align="left">-f,–force</td>
<td align="left">强制重新生成文件<br>Hexo 引入了差分机制，如果 public 目录存在，那么 hexo g 只会重新生成改动的文件。<br>使用该参数的效果接近 hexo clean &amp;&amp; hexo generate</td>
</tr>
<tr>
<td align="left">-c,–concurrency</td>
<td align="left">最大同时生成文件的数量，默认无限制</td>
</tr>
</tbody></table>
<h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>
<p>草稿转为正式文章。</p>
<h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server <span class="comment"># 简写  hexo s</span></span><br></pre></td></tr></table></figure>
<p>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/。" target="_blank" rel="noopener">http://localhost:4000/。</a></p>
<table>
<thead>
<tr>
<th align="left">可选参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-p, –port</td>
<td align="left">设置端口</td>
</tr>
<tr>
<td align="left">-s, –static</td>
<td align="left">只使用静态文件</td>
</tr>
<tr>
<td align="left">-l, –log</td>
<td align="left">启动日记记录，使用覆盖记录格式</td>
</tr>
</tbody></table>
<h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy   <span class="comment"># 简写: hexo d</span></span><br></pre></td></tr></table></figure>
<p>部署网站</p>
<table>
<thead>
<tr>
<th align="left">可选参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-g, –generate</td>
<td align="left">部署之前预先生成静态文件</td>
</tr>
</tbody></table>
<h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>
<p>渲染文件。</p>
<table>
<thead>
<tr>
<th align="left">可选参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-o, –output</td>
<td align="left">设置输出路径</td>
</tr>
</tbody></table>
<h3 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo migrate &lt;<span class="built_in">type</span>&gt;</span><br></pre></td></tr></table></figure>
<p>从其他博客系统<a href="https://hexo.io/zh-cn/docs/migration" target="_blank" rel="noopener">迁移内容</a>。</p>
<h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
<p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo list &lt;<span class="built_in">type</span>&gt;</span><br></pre></td></tr></table></figure>

<p>列出网站资料。</p>
<h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure>
<p>显示hexo版本。</p>
<h3 id="config-自定义配置文件的路径"><a href="#config-自定义配置文件的路径" class="headerlink" title="config(自定义配置文件的路径)"></a>config(自定义配置文件的路径)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 custom.yml 代替默认的 _config.yml</span></span><br><span class="line">hexo server --config custom.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高</span></span><br><span class="line">hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure>
<p>自定义配置文件的路径，指定这个参数后将不再使用默认的 _config.yml。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。</p>
<p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 _multiconfig.yml。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p>
<h3 id="cwd-自定义当前工作目录"><a href="#cwd-自定义当前工作目录" class="headerlink" title="cwd(自定义当前工作目录)"></a>cwd(自定义当前工作目录)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo --cwd /path/to/cwd</span><br></pre></td></tr></table></figure>
<p>自定义当前工作目录（Current working directory）的路径。</p>
<h3 id="模式选项-safe-debug-silent-draft"><a href="#模式选项-safe-debug-silent-draft" class="headerlink" title="模式选项(safe,debug,silent,draft)"></a>模式选项(safe,debug,silent,draft)</h3><h4 id="safe"><a href="#safe" class="headerlink" title="safe"></a>safe</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo --safe</span><br></pre></td></tr></table></figure>
<p>安全模式:在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>
<h4 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo --debug</span><br></pre></td></tr></table></figure>
<p>在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并提交调试信息到 GitHub。</p>
<h4 id="silent"><a href="#silent" class="headerlink" title="silent"></a>silent</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo --silent</span><br></pre></td></tr></table></figure>
<p>隐藏终端信息。</p>
<h4 id="draft"><a href="#draft" class="headerlink" title="draft"></a>draft</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo --draft</span><br></pre></td></tr></table></figure>
<p>显示草稿文章。</p>
<h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a><a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">官方文档</a></h3>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue项目打包报错:No module factory available for dependency type:CssDependency</title>
    <url>/2020/07/27/WebpackErrorCssDependency/</url>
    <content><![CDATA[<h3 id="Vue项目打包报错-No-module-factory-available-for-dependency-type-CssDependency"><a href="#Vue项目打包报错-No-module-factory-available-for-dependency-type-CssDependency" class="headerlink" title="Vue项目打包报错: No module factory available for dependency type: CssDependency"></a>Vue项目打包报错: No module factory available for dependency type: CssDependency</h3><p>问题描述：在打包过程出现 没有可用于依赖类型的模块 CssDependency<br>在vue.config.js中添加就可以解决问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  css: &#123;</span><br><span class="line">    extract: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/weixin_45615791/article/details/104294458" target="_blank" rel="noopener">参考资料</a></p>
]]></content>
      <categories>
        <category>Webpack</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js入门教程</title>
    <url>/2021/01/19/vue-base/</url>
    <content><![CDATA[<h1 id="vue-js中data为什么是个函数？"><a href="#vue-js中data为什么是个函数？" class="headerlink" title="vue.js中data为什么是个函数？"></a>vue.js中data为什么是个函数？</h1><p>函数形成闭包，避免数据污染</p>
<h1 id="export-default-xxx-和-export-xxx-的区别？"><a href="#export-default-xxx-和-export-xxx-的区别？" class="headerlink" title="export default xxx 和 export xxx 的区别？"></a>export default xxx 和 export xxx 的区别？</h1><p>导出1个和多个的问题，前者可导出多个，后者导出一个方法</p>
<h1 id="Vue版本和Vue-cli版本的区别"><a href="#Vue版本和Vue-cli版本的区别" class="headerlink" title="Vue版本和Vue-cli版本的区别"></a>Vue版本和Vue-cli版本的区别</h1><a id="more"></a>

<h1 id="Vue2-0和-Vue3-0的区别"><a href="#Vue2-0和-Vue3-0的区别" class="headerlink" title="Vue2.0和 Vue3.0的区别"></a>Vue2.0和 Vue3.0的区别</h1><h1 id="webpack属性配置"><a href="#webpack属性配置" class="headerlink" title="webpack属性配置"></a>webpack属性配置</h1><h1 id="webpack-ES6的处理"><a href="#webpack-ES6的处理" class="headerlink" title="webpack-ES6的处理"></a>webpack-ES6的处理</h1><h1 id="ES6代码变化"><a href="#ES6代码变化" class="headerlink" title="ES6代码变化"></a>ES6代码变化</h1><h1 id="vue全局组件"><a href="#vue全局组件" class="headerlink" title="vue全局组件"></a>vue全局组件</h1><p>在main.js引入再通过vue.component(‘组件名’,’组件对象’)注入即可在其他文件中引入该全局组件，无需重复引入和声明</p>
<h1 id="父子组件传值"><a href="#父子组件传值" class="headerlink" title="父子组件传值"></a>父子组件传值</h1><h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><h1 id="获取DOM元素"><a href="#获取DOM元素" class="headerlink" title="获取DOM元素"></a>获取DOM元素</h1><h1 id="mint-ui"><a href="#mint-ui" class="headerlink" title="mint-ui"></a>mint-ui</h1><p>饿了么出品移动端组件库</p>
<h1 id="wappalyzer"><a href="#wappalyzer" class="headerlink" title="wappalyzer"></a>wappalyzer</h1><p>查看网站使用的技术栈，也不一定准，需要翻墙安装插件</p>
<h1 id="use实际操作"><a href="#use实际操作" class="headerlink" title="use实际操作"></a>use实际操作</h1>]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之Github&amp;Gitee双托管</title>
    <url>/2020/05/25/hexoDeployOnGitee/</url>
    <content><![CDATA[<h3 id="为什么要部署到码云"><a href="#为什么要部署到码云" class="headerlink" title="为什么要部署到码云?"></a>为什么要部署到码云?</h3><p>因github国内访问速度太慢,且百度不能搜索github内容</p>
<h3 id="双托管百度统计处理"><a href="#双托管百度统计处理" class="headerlink" title="双托管百度统计处理"></a>双托管百度统计处理</h3><p>修改themes\next\layout_third-party\analytics\baidu-analytics.swig文件内容,对域名加判断就可对两个网站分别统计</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#123;%-</span> <span class="string">if</span> <span class="string">theme.baidu_analytics</span> <span class="string">%&#125;</span></span><br><span class="line">  <span class="string">&lt;script&#123;&#123;</span> <span class="string">pjax</span> <span class="string">&#125;&#125;&gt;</span></span><br><span class="line">    <span class="string">var</span> <span class="string">_hmt</span> <span class="string">=</span> <span class="string">_hmt</span> <span class="string">||</span> <span class="string">[];</span></span><br><span class="line">    <span class="string">(function()</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">var</span> <span class="string">hm</span> <span class="string">=</span> <span class="string">document.createElement("script");</span></span><br><span class="line">      <span class="string">if(window.location.href.indexOf('YourGiteeDomain')!=-1)&#123;</span></span><br><span class="line">        <span class="string">hm.src</span> <span class="string">=</span> <span class="string">"https://hm.baidu.com/hm.js?YourGiteeID"</span><span class="string">;</span></span><br><span class="line">      <span class="string">&#125;else&#123;</span></span><br><span class="line">        <span class="string">hm.src</span> <span class="string">=</span> <span class="string">"https://hm.baidu.com/hm.js?<span class="template-variable">&#123;&#123; theme.baidu_analytics &#125;&#125;</span>"</span><span class="string">;</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">      <span class="string">var</span> <span class="string">s</span> <span class="string">=</span> <span class="string">document.getElementsByTagName("script")[0];</span></span><br><span class="line">      <span class="string">s.parentNode.insertBefore(hm,</span> <span class="string">s);</span></span><br><span class="line">    <span class="string">&#125;)();</span></span><br><span class="line">  <span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&#123;%-</span> <span class="string">endif</span> <span class="string">%&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="双托管来比力评论处理"><a href="#双托管来比力评论处理" class="headerlink" title="双托管来比力评论处理"></a>双托管来比力评论处理</h3><p>来比力评论系统是针对网站的,测试发现如果只有一个UID只有对应的网站能够登录评论;<br>非对应网站不能登录但是能看到指定网站的评论内容<br>因此,双托管需要再注册一个来比力账号并绑定域名获取UID,<a href="http://livere.com" target="_blank" rel="noopener">注册来比力</a><br>然后需要修改下面代码对域名进行判断是否替换UID,下面代码插入&lt;script&gt;即可<br>themes\next\layout_third-party\comments\livere.swig</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.location.href.indexOf(<span class="string">'yourGiteeDomain'</span>)!=<span class="number">-1</span>)&#123;</span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">'#lv-container'</span>).setAttribute(<span class="string">"data-uid"</span>,<span class="string">"yourGiteeUID"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
        <tag>NexT</tag>
        <tag>搭建博客</tag>
        <tag>Gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue项目SEO优化的4种方案</title>
    <url>/2020/10/13/Vue4waysForSEO/</url>
    <content><![CDATA[<h1 id="SSR服务器渲染"><a href="#SSR服务器渲染" class="headerlink" title="SSR服务器渲染"></a>SSR服务器渲染</h1><h1 id="静态化"><a href="#静态化" class="headerlink" title="静态化"></a>静态化</h1><h1 id="预渲染-prerender-spa-plugin"><a href="#预渲染-prerender-spa-plugin" class="headerlink" title="预渲染 prerender-spa-plugin"></a>预渲染 prerender-spa-plugin</h1><h1 id="使用Phantomjs针对爬虫做优化"><a href="#使用Phantomjs针对爬虫做优化" class="headerlink" title="使用Phantomjs针对爬虫做优化"></a>使用Phantomjs针对爬虫做优化</h1><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>SEO</tag>
        <tag>SSR</tag>
      </tags>
  </entry>
  <entry>
    <title>DeepCopy</title>
    <url>/2020/07/27/DeepCopy/</url>
    <content><![CDATA[<h3 id="js对象深拷贝的3种方法"><a href="#js对象深拷贝的3种方法" class="headerlink" title="js对象深拷贝的3种方法"></a>js对象深拷贝的3种方法</h3><p>js对象不像变量那样，简单的赋值就能进行克隆的，对象进行赋值时，只是创建了一个新的指针指向相同的存储空间。就像这样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b=a;</span><br><span class="line">b.a=<span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(a.a);  <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>这时输出a你会发现，a的值同样发生了改变。<br>这一点在你进行数据操作时，又想保留原来数据时，你就需要深度克隆了。</p>
<a id="more"></a>

<ol>
<li>方法一:js序列化</li>
</ol>
<p>有一种时通过js序列化，将js转换成字符串，然后再将字符串转换成js对象。</p>
<p>具体代码为:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> str = <span class="built_in">JSON</span>.stringify(obj); <span class="comment">//序列化对象</span></span><br><span class="line"><span class="keyword">var</span> newobj = <span class="built_in">JSON</span>.parse(str); <span class="comment">//还原</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>方法二:对象遍历逐条复制<br>就是进行对象的遍历复制，对对象的每一条属性进行复制，这样就能进行对象的深度克隆<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> str, newobj = obj.constructor === <span class="built_in">Array</span> ? [] : &#123;&#125;;<span class="comment">//constructor 属性返回对创建此对象的数组函数的引用。创建相同类型的空数据</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[i] === <span class="string">'object'</span>)&#123;<span class="comment">//判断对象的这条属性是否为对象</span></span><br><span class="line">        newobj[i] = newObj(obj[i]);<span class="comment">//若是对象进行嵌套调用</span></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        newobj[i] = obj[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newobj;<span class="comment">//返回深度克隆后的对象</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>方法三: ES6对象展开赋值<br>还一种就是应用es6的语法对象展开运算符进行对象的展开赋值；<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;<span class="attr">a</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">let</span> b = &#123;...a&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此方法是不是太简单了?!</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端面试题</tag>
        <tag>JavaScript</tag>
        <tag>深拷贝</tag>
      </tags>
  </entry>
</search>
